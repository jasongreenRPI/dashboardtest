{"ast":null,"code":"import { renderSlot as _renderSlot, resolveDynamicComponent as _resolveDynamicComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(_resolveDynamicComponent($setup.is), {\n    \"class\": _normalizeClass($setup.componentClass),\n    to: $props.to,\n    href: $props.href,\n    \"exact-active-class\": $setup.activeClass\n  }, {\n    \"default\": _withCtx(function () {\n      return [_renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3 /* FORWARDED */\n  }, 8 /* PROPS */, [\"class\", \"to\", \"href\", \"exact-active-class\"]);\n}","map":{"version":3,"names":["_createBlock","_resolveDynamicComponent","$setup","is","_normalizeClass","componentClass","to","$props","href","activeClass","_renderSlot","_ctx","$slots"],"sources":["/Users/jasongreenberg/Desktop/testdashboard/dashboardtest/dashboard/src/components/NavBarItem.vue"],"sourcesContent":["<script setup>\nimport { useStore } from \"vuex\";\nimport { computed } from \"vue\";\n\nconst props = defineProps({\n  href: {\n    type: String,\n    default: null,\n  },\n  to: {\n    type: String,\n    default: null,\n  },\n  type: {\n    type: String,\n    default: \"flex\",\n  },\n  activeColor: {\n    type: String,\n    default: null,\n  },\n  hasDivider: Boolean,\n  isDesktopIconOnly: Boolean,\n  dropdown: Boolean,\n  active: Boolean,\n  class: {\n    type: [String, Object],\n    default: \"\",\n  },\n});\n\nconst is = computed(() => {\n  if (props.href) {\n    return \"a\";\n  }\n\n  if (props.to) {\n    return \"router-link\";\n  }\n\n  return \"div\";\n});\n\nconst store = useStore();\n\nconst componentClass = computed(() => {\n  const activeColor =\n    props.activeColor ??\n    `${store.state.navBarItemLabelActiveColorStyle} dark:text-gray-400`;\n\n  const base = [\n    props.type,\n    \"items-center\",\n    \"grow-0\",\n    \"shrink-0\",\n    \"relative\",\n    \"cursor-pointer\",\n    props.active\n      ? activeColor\n      : `${store.state.navBarItemLabelStyle} dark:text-white dark:hover:text-gray-400 ${store.state.navBarItemLabelHoverStyle}`,\n  ];\n\n  if (props.type === \"block\") {\n    base.push(\"lg:flex\");\n  }\n\n  if (!props.dropdown) {\n    base.push(\"py-2\", \"px-3\");\n  } else {\n    base.push(\"p-0\", \"lg:py-2\", \"lg:px-3\");\n  }\n\n  if (props.hasDivider) {\n    base.push(\n      \"lg:border-r\",\n      store.state.lightBorderStyle,\n      \"lg:dark:border-gray-800\"\n    );\n  }\n\n  if (props.isDesktopIconOnly) {\n    base.push(\"lg:w-16\", \"lg:justify-center\");\n  }\n\n  if (props.class) {\n    base.push(props.class);\n  }\n\n  return base;\n});\n\nconst activeClass = computed(() => {\n  return is.value === \"router-link\" ? props.activeColor : null;\n});\n</script>\n\n<template>\n  <component\n    :is=\"is\"\n    :class=\"componentClass\"\n    :to=\"to\"\n    :href=\"href\"\n    :exact-active-class=\"activeClass\"\n  >\n    <slot />\n  </component>\n</template>\n"],"mappings":";;uBAiGEA,YAAA,CAQYC,wBAAA,CAPLC,MAAA,CAAAC,EAAE;IACN,SAAKC,eAAA,CAAEF,MAAA,CAAAG,cAAc;IACrBC,EAAE,EAAEC,MAAA,CAAAD,EAAE;IACNE,IAAI,EAAED,MAAA,CAAAC,IAAI;IACV,oBAAkB,EAAEN,MAAA,CAAAO;;wBAErB;MAAA,OAAQ,CAARC,WAAA,CAAQC,IAAA,CAAAC,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module"}