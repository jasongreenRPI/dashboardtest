{"ast":null,"code":"import _asyncToGenerator from \"/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport { createStore } from \"vuex\";\nimport axios from \"axios\";\nimport * as styles from \"@/styles.js\";\nexport default createStore({\n  state: {\n    /* Styles */\n    lightBorderStyle: styles.basic.lightBorder,\n    lightBgStyle: styles.basic.lightBg,\n    asideStyle: styles.basic.aside,\n    asideBrandStyle: styles.basic.asideBrand,\n    asideMenuCloseLgStyle: styles.basic.asideMenuCloseLg,\n    asideMenuLabelStyle: styles.basic.asideMenuLabel,\n    asideMenuItemStyle: styles.basic.asideMenuItem,\n    asideMenuItemActiveStyle: styles.basic.asideMenuItemActive,\n    asideMenuItemInactiveStyle: styles.basic.asideMenuItemInactive,\n    asideSubmenuListStyle: styles.basic.asideSubmenuList,\n    navBarItemLabelStyle: styles.basic.navBarItemLabel,\n    navBarItemLabelHoverStyle: styles.basic.navBarItemLabelHover,\n    navBarItemLabelActiveColorStyle: styles.basic.navBarItemLabelActiveColor,\n    navBarMenuListUpperLabelStyle: styles.basic.navBarMenuListUpperLabel,\n    tableTrStyle: styles.basic.tableTr,\n    tableTrOddStyle: styles.basic.tableTrOdd,\n    overlayStyle: styles.basic.overlay,\n\n    /* User */\n    userName: null,\n    userEmail: null,\n    userAvatar: null,\n\n    /* organization */\n    userOrganizations: [],\n    selectedOrganizationId: null,\n    currentOrganizationJobs: [],\n    // New state for current org's jobs\n\n    /* fullScreen - fullscreen form layout (e.g. login page) */\n    isFullScreen: false,\n\n    /* Aside */\n    isAsideMobileExpanded: false,\n    isAsideLgActive: false,\n    isAsideCollapsed: false,\n\n    /* Dark mode - hardcoded to true */\n    darkMode: true,\n\n    /* Field focus with ctrl+k (to register only once) */\n    isFieldFocusRegistered: false,\n\n    /* Sample data (commonly used) */\n    clients: [],\n    history: []\n  },\n  getters: {\n    selectedOrganization: function selectedOrganization(state) {\n      return state.userOrganizations.find(function (org) {\n        return org.id === state.selectedOrganizationId;\n      }) || {};\n    },\n    currentJobs: function currentJobs(state) {\n      return state.currentOrganizationJobs;\n    }\n  },\n  mutations: {\n    /* A fit-them-all commit */\n    basic: function basic(state, payload) {\n      state[payload.key] = payload.value;\n    },\n\n    /* User */\n    user: function user(state, payload) {\n      if (payload.name) {\n        state.userName = payload.name;\n      }\n\n      if (payload.email) {\n        state.userEmail = payload.email;\n      }\n\n      if (payload.avatar) {\n        state.userAvatar = payload.avatar;\n      }\n    },\n    setUserOrganizations: function setUserOrganizations(state, payload) {\n      state.userOrganizations = payload.organizations; // Set first organization as selected if available\n\n      if (payload.organizations && payload.organizations.length > 0) {\n        state.selectedOrganizationId = payload.organizations[0].id;\n      } else {\n        state.selectedOrganizationId = null;\n      }\n    },\n    setSelectedOrganization: function setSelectedOrganization(state, payload) {\n      state.selectedOrganizationId = payload.id;\n    },\n    setCurrentOrganizationJobs: function setCurrentOrganizationJobs(state, payload) {\n      state.currentOrganizationJobs = payload.jobs;\n    }\n  },\n  actions: {\n    setStyle: function setStyle(_ref) {\n      var commit = _ref.commit;\n      // Apply basic style by default\n      var style = styles.basic;\n      document.body.className = style.body;\n      document.documentElement.className = style.html; // Apply each style to state\n\n      for (var key in style) {\n        if (![\"body\", \"html\"].includes(key)) {\n          commit(\"basic\", {\n            key: \"\".concat(key, \"Style\"),\n            value: style[key]\n          });\n        }\n      }\n    },\n    asideMobileToggle: function asideMobileToggle(_ref2) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var isShow = payload !== null ? payload : !state.isAsideMobileExpanded;\n      document.getElementById(\"app\").classList[isShow ? \"add\" : \"remove\"](\"ml-60\", \"lg:ml-0\");\n      document.documentElement.classList[isShow ? \"add\" : \"remove\"](\"m-clipped\");\n      commit(\"basic\", {\n        key: \"isAsideMobileExpanded\",\n        value: isShow\n      });\n    },\n    asideLgToggle: function asideLgToggle(_ref3) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      commit(\"basic\", {\n        key: \"isAsideLgActive\",\n        value: payload !== null ? payload : !state.isAsideLgActive\n      });\n    },\n    asideCollapseToggle: function asideCollapseToggle(_ref4) {\n      var commit = _ref4.commit,\n          state = _ref4.state;\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var isCollapsed = payload !== null ? payload : !state.isAsideCollapsed;\n      commit(\"basic\", {\n        key: \"isAsideCollapsed\",\n        value: isCollapsed\n      });\n    },\n    fullScreenToggle: function fullScreenToggle(_ref5, value) {\n      var commit = _ref5.commit;\n      commit(\"basic\", {\n        key: \"isFullScreen\",\n        value: value\n      });\n      document.documentElement.classList[value ? \"add\" : \"remove\"](\"full-screen\");\n    },\n    darkMode: function darkMode(_ref6) {\n      var commit = _ref6.commit;\n      // Always true\n      document.documentElement.classList.add(\"dark\");\n      commit(\"basic\", {\n        key: \"darkMode\",\n        value: true\n      });\n    },\n    fetch: function fetch(_ref7, payload) {\n      var commit = _ref7.commit;\n      axios.get(\"data-sources/\".concat(payload, \".json\")).then(function (r) {\n        if (r.data && r.data.data) {\n          commit(\"basic\", {\n            key: payload,\n            value: r.data.data\n          });\n        }\n      }).catch(function (error) {\n        console.warn(\"Failed to load \".concat(payload, \" data:\"), error);\n      });\n    },\n    initializeOrganizations: function initializeOrganizations(_ref8) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var commit, dispatch, mockOrganizations;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref8.commit, dispatch = _ref8.dispatch;\n                // Mock data for organizations with jobs and applicants\n                mockOrganizations = [{\n                  id: 1,\n                  name: \"Organization 1\",\n                  jobs: {\n                    softwareEngineer: {\n                      id: \"se1\",\n                      title: \"Software Engineer\",\n                      chatbotEnvironment: \"\",\n                      applicants: [{\n                        id: \"app1\",\n                        username: \"john_doe\",\n                        email: \"john@example.com\"\n                      }, {\n                        id: \"app2\",\n                        username: \"jane_smith\",\n                        email: \"jane@example.com\"\n                      }]\n                    },\n                    productManager: {\n                      id: \"pm1\",\n                      title: \"Product Manager\",\n                      chatbotEnvironment: \"\",\n                      applicants: [{\n                        id: \"app3\",\n                        username: \"bob_wilson\",\n                        email: \"bob@example.com\"\n                      }]\n                    }\n                  }\n                }, {\n                  id: 2,\n                  name: \"Organization 2\",\n                  jobs: {\n                    dataScientist: {\n                      id: \"ds1\",\n                      title: \"Data Scientist\",\n                      chatbotEnvironment: \"\",\n                      applicants: [{\n                        id: \"app4\",\n                        username: \"alice_jones\",\n                        email: \"alice@example.com\"\n                      }]\n                    }\n                  }\n                }, {\n                  id: 3,\n                  name: \"Organization 3\",\n                  jobs: {\n                    marketingManager: {\n                      id: \"mm1\",\n                      title: \"Marketing Manager\",\n                      chatbotEnvironment: \"\",\n                      applicants: [{\n                        id: \"app5\",\n                        username: \"charlie_brown\",\n                        email: \"charlie@example.com\"\n                      }]\n                    }\n                  }\n                }];\n                commit(\"setUserOrganizations\", {\n                  organizations: mockOrganizations\n                }); // Load jobs for the first organization\n\n                if (!(mockOrganizations.length > 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return dispatch(\"loadOrganizationJobs\", {\n                  organizationId: mockOrganizations[0].id\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    loadOrganizationJobs: function loadOrganizationJobs(_ref9, _ref10) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var commit, state, organizationId, organization, jobs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref9.commit, state = _ref9.state;\n                organizationId = _ref10.organizationId;\n                organization = state.userOrganizations.find(function (org) {\n                  return org.id === organizationId;\n                });\n\n                if (organization) {\n                  // In a real app, this would be an API call\n                  // For now, we just get the jobs from our mock data\n                  jobs = organization.jobs || {};\n                  commit(\"setCurrentOrganizationJobs\", {\n                    jobs: Object.values(jobs)\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // When selecting a new organization, also load its jobs\n    selectOrganization: function selectOrganization(_ref11, _ref12) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var commit, dispatch, id;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref11.commit, dispatch = _ref11.dispatch;\n                id = _ref12.id;\n                commit(\"setSelectedOrganization\", {\n                  id: id\n                });\n                _context3.next = 5;\n                return dispatch(\"loadOrganizationJobs\", {\n                  organizationId: id\n                });\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  },\n  modules: {}\n});","map":{"version":3,"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/store/index.js"],"names":["createStore","axios","styles","state","lightBorderStyle","basic","lightBorder","lightBgStyle","lightBg","asideStyle","aside","asideBrandStyle","asideBrand","asideMenuCloseLgStyle","asideMenuCloseLg","asideMenuLabelStyle","asideMenuLabel","asideMenuItemStyle","asideMenuItem","asideMenuItemActiveStyle","asideMenuItemActive","asideMenuItemInactiveStyle","asideMenuItemInactive","asideSubmenuListStyle","asideSubmenuList","navBarItemLabelStyle","navBarItemLabel","navBarItemLabelHoverStyle","navBarItemLabelHover","navBarItemLabelActiveColorStyle","navBarItemLabelActiveColor","navBarMenuListUpperLabelStyle","navBarMenuListUpperLabel","tableTrStyle","tableTr","tableTrOddStyle","tableTrOdd","overlayStyle","overlay","userName","userEmail","userAvatar","userOrganizations","selectedOrganizationId","currentOrganizationJobs","isFullScreen","isAsideMobileExpanded","isAsideLgActive","isAsideCollapsed","darkMode","isFieldFocusRegistered","clients","history","getters","selectedOrganization","find","org","id","currentJobs","mutations","payload","key","value","user","name","email","avatar","setUserOrganizations","organizations","length","setSelectedOrganization","setCurrentOrganizationJobs","jobs","actions","setStyle","commit","style","document","body","className","documentElement","html","includes","asideMobileToggle","isShow","getElementById","classList","asideLgToggle","asideCollapseToggle","isCollapsed","fullScreenToggle","add","fetch","get","then","r","data","catch","error","console","warn","initializeOrganizations","dispatch","mockOrganizations","softwareEngineer","title","chatbotEnvironment","applicants","username","productManager","dataScientist","marketingManager","organizationId","loadOrganizationJobs","organization","Object","values","selectOrganization","modules"],"mappings":"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","sourcesContent":["import { createStore } from \"vuex\";\nimport axios from \"axios\";\nimport * as styles from \"@/styles.js\";\n\nexport default createStore({\n  state: {\n    /* Styles */\n    lightBorderStyle: styles.basic.lightBorder,\n    lightBgStyle: styles.basic.lightBg,\n    asideStyle: styles.basic.aside,\n    asideBrandStyle: styles.basic.asideBrand,\n    asideMenuCloseLgStyle: styles.basic.asideMenuCloseLg,\n    asideMenuLabelStyle: styles.basic.asideMenuLabel,\n    asideMenuItemStyle: styles.basic.asideMenuItem,\n    asideMenuItemActiveStyle: styles.basic.asideMenuItemActive,\n    asideMenuItemInactiveStyle: styles.basic.asideMenuItemInactive,\n    asideSubmenuListStyle: styles.basic.asideSubmenuList,\n    navBarItemLabelStyle: styles.basic.navBarItemLabel,\n    navBarItemLabelHoverStyle: styles.basic.navBarItemLabelHover,\n    navBarItemLabelActiveColorStyle: styles.basic.navBarItemLabelActiveColor,\n    navBarMenuListUpperLabelStyle: styles.basic.navBarMenuListUpperLabel,\n    tableTrStyle: styles.basic.tableTr,\n    tableTrOddStyle: styles.basic.tableTrOdd,\n    overlayStyle: styles.basic.overlay,\n\n    /* User */\n    userName: null,\n    userEmail: null,\n    userAvatar: null,\n\n    /* organization */\n    userOrganizations: [],\n    selectedOrganizationId: null,\n    currentOrganizationJobs: [], // New state for current org's jobs\n\n    /* fullScreen - fullscreen form layout (e.g. login page) */\n    isFullScreen: false,\n\n    /* Aside */\n    isAsideMobileExpanded: false,\n    isAsideLgActive: false,\n    isAsideCollapsed: false,\n\n    /* Dark mode - hardcoded to true */\n    darkMode: true,\n\n    /* Field focus with ctrl+k (to register only once) */\n    isFieldFocusRegistered: false,\n\n    /* Sample data (commonly used) */\n    clients: [],\n    history: [],\n  },\n  getters: {\n    selectedOrganization: (state) => {\n      return (\n        state.userOrganizations.find(\n          (org) => org.id === state.selectedOrganizationId\n        ) || {}\n      );\n    },\n    currentJobs: (state) => {\n      return state.currentOrganizationJobs;\n    },\n  },\n  mutations: {\n    /* A fit-them-all commit */\n    basic(state, payload) {\n      state[payload.key] = payload.value;\n    },\n\n    /* User */\n    user(state, payload) {\n      if (payload.name) {\n        state.userName = payload.name;\n      }\n      if (payload.email) {\n        state.userEmail = payload.email;\n      }\n      if (payload.avatar) {\n        state.userAvatar = payload.avatar;\n      }\n    },\n\n    setUserOrganizations(state, payload) {\n      state.userOrganizations = payload.organizations;\n      // Set first organization as selected if available\n      if (payload.organizations && payload.organizations.length > 0) {\n        state.selectedOrganizationId = payload.organizations[0].id;\n      } else {\n        state.selectedOrganizationId = null;\n      }\n    },\n\n    setSelectedOrganization(state, payload) {\n      state.selectedOrganizationId = payload.id;\n    },\n\n    setCurrentOrganizationJobs(state, payload) {\n      state.currentOrganizationJobs = payload.jobs;\n    },\n  },\n  actions: {\n    setStyle({ commit }) {\n      // Apply basic style by default\n      const style = styles.basic;\n      document.body.className = style.body;\n      document.documentElement.className = style.html;\n\n      // Apply each style to state\n      for (const key in style) {\n        if (![\"body\", \"html\"].includes(key)) {\n          commit(\"basic\", {\n            key: `${key}Style`,\n            value: style[key],\n          });\n        }\n      }\n    },\n\n    asideMobileToggle({ commit, state }, payload = null) {\n      const isShow = payload !== null ? payload : !state.isAsideMobileExpanded;\n\n      document\n        .getElementById(\"app\")\n        .classList[isShow ? \"add\" : \"remove\"](\"ml-60\", \"lg:ml-0\");\n      document.documentElement.classList[isShow ? \"add\" : \"remove\"](\n        \"m-clipped\"\n      );\n\n      commit(\"basic\", {\n        key: \"isAsideMobileExpanded\",\n        value: isShow,\n      });\n    },\n\n    asideLgToggle({ commit, state }, payload = null) {\n      commit(\"basic\", {\n        key: \"isAsideLgActive\",\n        value: payload !== null ? payload : !state.isAsideLgActive,\n      });\n    },\n\n    asideCollapseToggle({ commit, state }, payload = null) {\n      const isCollapsed = payload !== null ? payload : !state.isAsideCollapsed;\n      commit(\"basic\", {\n        key: \"isAsideCollapsed\",\n        value: isCollapsed,\n      });\n    },\n\n    fullScreenToggle({ commit }, value) {\n      commit(\"basic\", { key: \"isFullScreen\", value });\n      document.documentElement.classList[value ? \"add\" : \"remove\"](\n        \"full-screen\"\n      );\n    },\n\n    darkMode({ commit }) {\n      // Always true\n      document.documentElement.classList.add(\"dark\");\n      commit(\"basic\", {\n        key: \"darkMode\",\n        value: true,\n      });\n    },\n\n    fetch({ commit }, payload) {\n      axios\n        .get(`data-sources/${payload}.json`)\n        .then((r) => {\n          if (r.data && r.data.data) {\n            commit(\"basic\", {\n              key: payload,\n              value: r.data.data,\n            });\n          }\n        })\n        .catch((error) => {\n          console.warn(`Failed to load ${payload} data:`, error);\n        });\n    },\n\n    async initializeOrganizations({ commit, dispatch }) {\n      // Mock data for organizations with jobs and applicants\n      const mockOrganizations = [\n        {\n          id: 1,\n          name: \"Organization 1\",\n          jobs: {\n            softwareEngineer: {\n              id: \"se1\",\n              title: \"Software Engineer\",\n              chatbotEnvironment: \"\",\n              applicants: [\n                {\n                  id: \"app1\",\n                  username: \"john_doe\",\n                  email: \"john@example.com\",\n                },\n                {\n                  id: \"app2\",\n                  username: \"jane_smith\",\n                  email: \"jane@example.com\",\n                },\n              ],\n            },\n            productManager: {\n              id: \"pm1\",\n              title: \"Product Manager\",\n              chatbotEnvironment: \"\",\n              applicants: [\n                {\n                  id: \"app3\",\n                  username: \"bob_wilson\",\n                  email: \"bob@example.com\",\n                },\n              ],\n            },\n          },\n        },\n        {\n          id: 2,\n          name: \"Organization 2\",\n          jobs: {\n            dataScientist: {\n              id: \"ds1\",\n              title: \"Data Scientist\",\n              chatbotEnvironment: \"\",\n              applicants: [\n                {\n                  id: \"app4\",\n                  username: \"alice_jones\",\n                  email: \"alice@example.com\",\n                },\n              ],\n            },\n          },\n        },\n        {\n          id: 3,\n          name: \"Organization 3\",\n          jobs: {\n            marketingManager: {\n              id: \"mm1\",\n              title: \"Marketing Manager\",\n              chatbotEnvironment: \"\",\n              applicants: [\n                {\n                  id: \"app5\",\n                  username: \"charlie_brown\",\n                  email: \"charlie@example.com\",\n                },\n              ],\n            },\n          },\n        },\n      ];\n\n      commit(\"setUserOrganizations\", { organizations: mockOrganizations });\n\n      // Load jobs for the first organization\n      if (mockOrganizations.length > 0) {\n        await dispatch(\"loadOrganizationJobs\", {\n          organizationId: mockOrganizations[0].id,\n        });\n      }\n    },\n\n    async loadOrganizationJobs({ commit, state }, { organizationId }) {\n      const organization = state.userOrganizations.find(\n        (org) => org.id === organizationId\n      );\n      if (organization) {\n        // In a real app, this would be an API call\n        // For now, we just get the jobs from our mock data\n        const jobs = organization.jobs || {};\n        commit(\"setCurrentOrganizationJobs\", { jobs: Object.values(jobs) });\n      }\n    },\n\n    // When selecting a new organization, also load its jobs\n    async selectOrganization({ commit, dispatch }, { id }) {\n      commit(\"setSelectedOrganization\", { id });\n      await dispatch(\"loadOrganizationJobs\", { organizationId: id });\n    },\n  },\n  modules: {},\n});\n"]},"metadata":{},"sourceType":"module"}