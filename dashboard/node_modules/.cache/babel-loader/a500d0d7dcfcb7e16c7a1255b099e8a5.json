{"ast":null,"code":"import { computed } from 'vue';\nimport { getButtonColor } from '@/colors.js';\nimport Icon from '@/components/Icon.vue';\nexport default {\n  props: {\n    label: {\n      type: [String, Number],\n      default: null\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    href: {\n      type: String,\n      default: null\n    },\n    target: {\n      type: String,\n      default: null\n    },\n    to: {\n      type: [String, Object],\n      default: null\n    },\n    type: {\n      type: String,\n      default: null\n    },\n    color: {\n      type: String,\n      default: 'white'\n    },\n    as: {\n      type: String,\n      default: null\n    },\n    small: Boolean,\n    outline: Boolean,\n    active: Boolean,\n    disabled: Boolean\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const is = computed(() => {\n      if (props.as) {\n        return props.as;\n      }\n      if (props.to) {\n        return 'router-link';\n      }\n      if (props.href) {\n        return 'a';\n      }\n      return 'button';\n    });\n    const computedType = computed(() => {\n      if (is.value === 'button') {\n        return props.type ?? 'button';\n      }\n      return null;\n    });\n    const labelClass = computed(() => props.small && props.icon ? 'px-1' : 'px-2');\n    const componentClass = computed(() => {\n      const base = ['inline-flex', 'cursor-pointer', 'justify-center', 'items-center', 'whitespace-nowrap', 'focus:outline-none', 'transition-colors', 'focus:ring', 'duration-150', 'border', 'rounded', props.active ? 'ring ring-black dark:ring-white' : 'ring-blue-700', props.small ? 'p-1' : 'p-2', getButtonColor(props.color, props.outline, !props.disabled)];\n      if (props.disabled) {\n        base.push('cursor-not-allowed', props.outline ? 'opacity-50' : 'opacity-70');\n      }\n      return base;\n    });\n    const __returned__ = {\n      props,\n      is,\n      computedType,\n      labelClass,\n      componentClass,\n      computed,\n      getButtonColor,\n      Icon\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAQ,KAAK;AAC9B,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAOC,IAAI,MAAM,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyCxC,MAAMC,EAAE,GAAGH,QAAQ,CAAC,MAAM;MACxB,IAAII,KAAK,CAACC,EAAE,EAAE;QACZ,OAAOD,KAAK,CAACC,EAAE;MACjB;MAEA,IAAID,KAAK,CAACE,EAAE,EAAE;QACZ,OAAO,aAAa;MACtB;MAEA,IAAIF,KAAK,CAACG,IAAI,EAAE;QACd,OAAO,GAAG;MACZ;MAEA,OAAO,QAAQ;IACjB,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGR,QAAQ,CAAC,MAAM;MAClC,IAAIG,EAAE,CAACM,KAAK,KAAK,QAAQ,EAAE;QACzB,OAAOL,KAAK,CAACM,IAAI,IAAI,QAAQ;MAC/B;MAEA,OAAO,IAAI;IACb,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGX,QAAQ,CAAC,MAAMI,KAAK,CAACQ,KAAK,IAAIR,KAAK,CAACS,IAAI,GAAG,MAAM,GAAG,MAAM,CAAC;IAE9E,MAAMC,cAAc,GAAGd,QAAQ,CAAC,MAAM;MACpC,MAAMe,IAAI,GAAG,CACX,aAAa,EACb,gBAAgB,EAChB,gBAAgB,EAChB,cAAc,EACd,mBAAmB,EACnB,oBAAoB,EACpB,mBAAmB,EACnB,YAAY,EACZ,cAAc,EACd,QAAQ,EACR,SAAS,EACTX,KAAK,CAACY,MAAM,GAAG,iCAAiC,GAAG,eAAe,EAClEZ,KAAK,CAACQ,KAAK,GAAG,KAAK,GAAG,KAAK,EAC3BX,cAAc,CAACG,KAAK,CAACa,KAAK,EAAEb,KAAK,CAACc,OAAO,EAAE,CAACd,KAAK,CAACe,QAAQ,CAAC,CAC5D;MAED,IAAIf,KAAK,CAACe,QAAQ,EAAE;QAClBJ,IAAI,CAACK,IAAI,CAAC,oBAAoB,EAAEhB,KAAK,CAACc,OAAO,GAAG,YAAY,GAAG,YAAY,CAAC;MAC9E;MAEA,OAAOH,IAAI;IACb,CAAC,CAAC","names":["computed","getButtonColor","Icon","is","props","as","to","href","computedType","value","type","labelClass","small","icon","componentClass","base","active","color","outline","disabled","push"],"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/JbButton.vue"],"sourcesContent":["<script setup>\nimport { computed } from 'vue'\nimport { getButtonColor } from '@/colors.js'\nimport Icon from '@/components/Icon.vue'\n\nconst props = defineProps({\n  label: {\n    type: [String, Number],\n    default: null\n  },\n  icon: {\n    type: String,\n    default: null\n  },\n  href: {\n    type: String,\n    default: null\n  },\n  target: {\n    type: String,\n    default: null\n  },\n  to: {\n    type: [String, Object],\n    default: null\n  },\n  type: {\n    type: String,\n    default: null\n  },\n  color: {\n    type: String,\n    default: 'white'\n  },\n  as: {\n    type: String,\n    default: null\n  },\n  small: Boolean,\n  outline: Boolean,\n  active: Boolean,\n  disabled: Boolean\n})\n\nconst is = computed(() => {\n  if (props.as) {\n    return props.as\n  }\n\n  if (props.to) {\n    return 'router-link'\n  }\n\n  if (props.href) {\n    return 'a'\n  }\n\n  return 'button'\n})\n\nconst computedType = computed(() => {\n  if (is.value === 'button') {\n    return props.type ?? 'button'\n  }\n\n  return null\n})\n\nconst labelClass = computed(() => props.small && props.icon ? 'px-1' : 'px-2')\n\nconst componentClass = computed(() => {\n  const base = [\n    'inline-flex',\n    'cursor-pointer',\n    'justify-center',\n    'items-center',\n    'whitespace-nowrap',\n    'focus:outline-none',\n    'transition-colors',\n    'focus:ring',\n    'duration-150',\n    'border',\n    'rounded',\n    props.active ? 'ring ring-black dark:ring-white' : 'ring-blue-700',\n    props.small ? 'p-1' : 'p-2',\n    getButtonColor(props.color, props.outline, !props.disabled)\n  ]\n\n  if (props.disabled) {\n    base.push('cursor-not-allowed', props.outline ? 'opacity-50' : 'opacity-70')\n  }\n\n  return base\n})\n</script>\n\n<template>\n  <component\n    :is=\"is\"\n    :class=\"componentClass\"\n    :href=\"href\"\n    :type=\"computedType\"\n    :to=\"to\"\n    :target=\"target\"\n    :disabled=\"disabled\"\n  >\n    <icon\n      v-if=\"icon\"\n      :path=\"icon\"\n    />\n    <span\n      v-if=\"label\"\n      :class=\"labelClass\"\n    >{{ label }}</span>\n  </component>\n</template>\n"]},"metadata":{},"sourceType":"module"}