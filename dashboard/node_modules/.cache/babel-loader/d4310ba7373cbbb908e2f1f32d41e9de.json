{"ast":null,"code":"import { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { mdiEye, mdiTrashCan } from \"@mdi/js\";\nimport Level from \"@/components/Level.vue\";\nimport JbButtons from \"@/components/JbButtons.vue\";\nimport JbButton from \"@/components/JbButton.vue\";\nimport UserAvatar from \"@/components/UserAvatar.vue\";\nexport default {\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const store = useStore();\n    const lightBorderStyle = computed(() => store.state.lightBorderStyle);\n    const lightBgStyle = computed(() => store.state.lightBgStyle);\n    const tableTrStyle = computed(() => store.state.tableTrStyle);\n    const tableTrOddStyle = computed(() => store.state.tableTrOddStyle);\n    const darkMode = computed(() => store.state.darkMode);\n\n    // Formatting functions\n    const formatDate = dateString => {\n      if (!dateString) return \"\";\n      return dateString; // Already in the right format from our mock data\n    };\n    const formatPhoneNumber = phoneNumber => {\n      if (!phoneNumber) return \"\";\n      // Remove all non-digits\n      const cleaned = phoneNumber.replace(/\\D/g, \"\");\n      // Format as (XXX) XXX-XXXX\n      const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n      if (match) {\n        return `(${match[1]}) ${match[2]}-${match[3]}`;\n      }\n      return phoneNumber;\n    };\n    const perPage = ref(10);\n    const currentPage = ref(0);\n    const itemsPaginated = computed(() => props.items?.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1)) || []);\n    const numPages = computed(() => Math.ceil((props.items?.length || 0) / perPage.value));\n    const currentPageHuman = computed(() => currentPage.value + 1);\n    const pagesList = computed(() => {\n      const pagesList = [];\n      for (let i = 0; i < numPages.value; i++) {\n        pagesList.push(i);\n      }\n      return pagesList;\n    });\n    const __returned__ = {\n      props,\n      store,\n      lightBorderStyle,\n      lightBgStyle,\n      tableTrStyle,\n      tableTrOddStyle,\n      darkMode,\n      formatDate,\n      formatPhoneNumber,\n      perPage,\n      currentPage,\n      itemsPaginated,\n      numPages,\n      currentPageHuman,\n      pagesList,\n      computed,\n      ref,\n      useStore,\n      mdiEye,\n      mdiTrashCan,\n      Level,\n      JbButtons,\n      JbButton,\n      UserAvatar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","useStore","mdiEye","mdiTrashCan","Level","JbButtons","JbButton","UserAvatar","store","lightBorderStyle","state","lightBgStyle","tableTrStyle","tableTrOddStyle","darkMode","formatDate","dateString","formatPhoneNumber","phoneNumber","cleaned","replace","match","perPage","currentPage","itemsPaginated","props","items","slice","value","numPages","Math","ceil","length","currentPageHuman","pagesList","i","push"],"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/ClientsTable.vue"],"sourcesContent":["<script setup>\nimport { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { mdiEye, mdiTrashCan } from \"@mdi/js\";\nimport Level from \"@/components/Level.vue\";\nimport JbButtons from \"@/components/JbButtons.vue\";\nimport JbButton from \"@/components/JbButton.vue\";\nimport UserAvatar from \"@/components/UserAvatar.vue\";\n\nconst props = defineProps({\n  items: {\n    type: Array,\n    default: () => [],\n  },\n});\n\nconst store = useStore();\n\nconst lightBorderStyle = computed(() => store.state.lightBorderStyle);\nconst lightBgStyle = computed(() => store.state.lightBgStyle);\nconst tableTrStyle = computed(() => store.state.tableTrStyle);\nconst tableTrOddStyle = computed(() => store.state.tableTrOddStyle);\nconst darkMode = computed(() => store.state.darkMode);\n\n// Formatting functions\nconst formatDate = (dateString) => {\n  if (!dateString) return \"\";\n  return dateString; // Already in the right format from our mock data\n};\n\nconst formatPhoneNumber = (phoneNumber) => {\n  if (!phoneNumber) return \"\";\n  // Remove all non-digits\n  const cleaned = phoneNumber.replace(/\\D/g, \"\");\n  // Format as (XXX) XXX-XXXX\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return `(${match[1]}) ${match[2]}-${match[3]}`;\n  }\n  return phoneNumber;\n};\n\nconst perPage = ref(10);\nconst currentPage = ref(0);\n\nconst itemsPaginated = computed(\n  () =>\n    props.items?.slice(\n      perPage.value * currentPage.value,\n      perPage.value * (currentPage.value + 1)\n    ) || []\n);\n\nconst numPages = computed(() =>\n  Math.ceil((props.items?.length || 0) / perPage.value)\n);\n\nconst currentPageHuman = computed(() => currentPage.value + 1);\n\nconst pagesList = computed(() => {\n  const pagesList = [];\n  for (let i = 0; i < numPages.value; i++) {\n    pagesList.push(i);\n  }\n  return pagesList;\n});\n</script>\n\n<template>\n  <div class=\"w-full\">\n    <table class=\"w-full\">\n      <thead>\n        <tr>\n          <th />\n          <th>Name</th>\n          <th>Email</th>\n          <th>Phone</th>\n          <th>Status</th>\n          <th>Applied</th>\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          v-for=\"(application, index) in itemsPaginated\"\n          :key=\"application.id\"\n          :class=\"[tableTrStyle, index % 2 === 0 ? tableTrOddStyle : '']\"\n        >\n          <td class=\"image-cell\">\n            <user-avatar :username=\"application.name\" class=\"image\" />\n          </td>\n          <td data-label=\"Name\">\n            {{ application.name }}\n          </td>\n          <td data-label=\"Email\">\n            {{ application.email }}\n          </td>\n          <td data-label=\"Phone\">\n            {{ formatPhoneNumber(application.phone) }}\n          </td>\n          <td data-label=\"Status\">\n            <span\n              :class=\"{\n                'px-2 py-1 rounded-full text-xs': true,\n                'bg-blue-100 text-blue-800': application.status === 'Applied',\n                'bg-yellow-100 text-yellow-800':\n                  application.status === 'Reviewed',\n                'bg-green-100 text-green-800':\n                  application.status === 'Acted On',\n              }\"\n            >\n              {{ application.status }}\n            </span>\n          </td>\n          <td data-label=\"Applied\">\n            <small class=\"text-gray-500 dark:text-gray-400\">\n              {{ application.applied_date }}\n            </small>\n          </td>\n          <td class=\"actions-cell\">\n            <jb-buttons type=\"justify-start lg:justify-end\" no-wrap>\n              <jb-button\n                :icon=\"mdiEye\"\n                small\n                class=\"text-blue-500\"\n                @click=\"$emit('view', application)\"\n              />\n              <jb-button\n                :icon=\"mdiTrashCan\"\n                small\n                class=\"text-red-500\"\n                @click=\"$emit('delete', application)\"\n              />\n            </jb-buttons>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div class=\"p-3 lg:px-6 border-t border-gray-100 dark:border-gray-800\">\n      <level>\n        <jb-buttons>\n          <jb-button\n            v-for=\"page in pagesList\"\n            :key=\"page\"\n            :active=\"page === currentPage\"\n            :label=\"page + 1\"\n            small\n            @click=\"currentPage = page\"\n          />\n        </jb-buttons>\n        <small>Page {{ currentPageHuman }} of {{ numPages }}</small>\n      </level>\n    </div>\n  </div>\n</template>\n"],"mappings":"AACA,SAASA,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AACnC,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,MAAM,EAAEC,WAAW,QAAQ,SAAS;AAC7C,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,UAAU,MAAM,6BAA6B;;;;;;;;;;;;;IASpD,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;IAExB,MAAMQ,gBAAgB,GAAGV,QAAQ,CAAC,MAAMS,KAAK,CAACE,KAAK,CAACD,gBAAgB,CAAC;IACrE,MAAME,YAAY,GAAGZ,QAAQ,CAAC,MAAMS,KAAK,CAACE,KAAK,CAACC,YAAY,CAAC;IAC7D,MAAMC,YAAY,GAAGb,QAAQ,CAAC,MAAMS,KAAK,CAACE,KAAK,CAACE,YAAY,CAAC;IAC7D,MAAMC,eAAe,GAAGd,QAAQ,CAAC,MAAMS,KAAK,CAACE,KAAK,CAACG,eAAe,CAAC;IACnE,MAAMC,QAAQ,GAAGf,QAAQ,CAAC,MAAMS,KAAK,CAACE,KAAK,CAACI,QAAQ,CAAC;;IAErD;IACA,MAAMC,UAAU,GAAIC,UAAU,IAAK;MACjC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;MAC1B,OAAOA,UAAU,CAAC,CAAC;IACrB,CAAC;IAED,MAAMC,iBAAiB,GAAIC,WAAW,IAAK;MACzC,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;MAC3B;MACA,MAAMC,OAAO,GAAGD,WAAW,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MAC9C;MACA,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAAC,yBAAyB,CAAC;MACtD,IAAIA,KAAK,EAAE;QACT,OAAO,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;MAChD;MACA,OAAOH,WAAW;IACpB,CAAC;IAED,MAAMI,OAAO,GAAGtB,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMuB,WAAW,GAAGvB,GAAG,CAAC,CAAC,CAAC;IAE1B,MAAMwB,cAAc,GAAGzB,QAAQ,CAC7B,MACE0B,KAAK,CAACC,KAAK,EAAEC,KAAK,CAChBL,OAAO,CAACM,KAAK,GAAGL,WAAW,CAACK,KAAK,EACjCN,OAAO,CAACM,KAAK,IAAIL,WAAW,CAACK,KAAK,GAAG,CAAC,CACxC,CAAC,IAAI,EACT,CAAC;IAED,MAAMC,QAAQ,GAAG9B,QAAQ,CAAC,MACxB+B,IAAI,CAACC,IAAI,CAAC,CAACN,KAAK,CAACC,KAAK,EAAEM,MAAM,IAAI,CAAC,IAAIV,OAAO,CAACM,KAAK,CACtD,CAAC;IAED,MAAMK,gBAAgB,GAAGlC,QAAQ,CAAC,MAAMwB,WAAW,CAACK,KAAK,GAAG,CAAC,CAAC;IAE9D,MAAMM,SAAS,GAAGnC,QAAQ,CAAC,MAAM;MAC/B,MAAMmC,SAAS,GAAG,EAAE;MACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,CAACD,KAAK,EAAEO,CAAC,EAAE,EAAE;QACvCD,SAAS,CAACE,IAAI,CAACD,CAAC,CAAC;MACnB;MACA,OAAOD,SAAS;IAClB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}