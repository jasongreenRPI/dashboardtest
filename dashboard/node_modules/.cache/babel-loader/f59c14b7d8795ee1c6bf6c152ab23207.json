{"ast":null,"code":"import { computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { useStore } from 'vuex';\nimport ControlIcon from '@/components/ControlIcon.vue';\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    autocomplete: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    options: {\n      type: Array,\n      default: null\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    modelValue: {\n      type: [String, Number, Boolean, Array, Object],\n      default: ''\n    },\n    required: Boolean,\n    borderless: Boolean,\n    transparent: Boolean,\n    ctrlKFocus: Boolean\n  },\n  emits: ['update:modelValue', 'right-icon-click'],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const computedValue = computed({\n      get: () => props.modelValue,\n      set: value => {\n        emit('update:modelValue', value);\n      }\n    });\n    const inputElClass = computed(() => {\n      const base = ['px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full', 'dark:placeholder-gray-400', computedType.value === 'textarea' ? 'h-24' : 'h-12', props.borderless ? 'border-0' : 'border', props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'];\n      if (props.icon) {\n        base.push('pl-10');\n      }\n      return base;\n    });\n    const computedType = computed(() => props.options ? 'select' : props.type);\n    const controlIconH = computed(() => props.type === 'textarea' ? 'h-full' : 'h-12');\n    const store = useStore();\n    const inputEl = ref(null);\n    if (props.ctrlKFocus) {\n      const fieldFocusHook = e => {\n        if (e.ctrlKey && e.key === 'k') {\n          e.preventDefault();\n          inputEl.value.focus();\n        } else if (e.key === 'Escape') {\n          inputEl.value.blur();\n        }\n      };\n      onMounted(() => {\n        if (!store.state.isFieldFocusRegistered) {\n          window.addEventListener('keydown', fieldFocusHook);\n          store.commit('basic', {\n            key: 'isFieldFocusRegistered',\n            value: true\n          });\n        } else {\n          // console.error('Duplicate field focus event')\n        }\n      });\n      onBeforeUnmount(() => {\n        window.removeEventListener('keydown', fieldFocusHook);\n        store.commit('basic', {\n          key: 'isFieldFocusRegistered',\n          value: false\n        });\n      });\n    }\n    const __returned__ = {\n      props,\n      emit,\n      computedValue,\n      inputElClass,\n      computedType,\n      controlIconH,\n      store,\n      inputEl,\n      computed,\n      ref,\n      onMounted,\n      onBeforeUnmount,\n      useStore,\n      ControlIcon\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,SAAS,EAAEC,eAAe,QAAQ,KAAK;AAC/D,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,WAAW,MAAM,8BAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2CtD,MAAMC,aAAa,GAAGN,QAAQ,CAAC;MAC7BO,GAAG,EAAEA,MAAMC,KAAK,CAACC,UAAU;MAC3BC,GAAG,EAAEC,KAAK,IAAI;QACZC,IAAI,CAAC,mBAAmB,EAAED,KAAK,CAAC;MAClC;IACF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGb,QAAQ,CAAC,MAAM;MAClC,MAAMc,IAAI,GAAG,CACX,mFAAmF,EACnF,2BAA2B,EAC3BC,YAAY,CAACJ,KAAK,KAAK,UAAU,GAAG,MAAM,GAAG,MAAM,EACnDH,KAAK,CAACQ,UAAU,GAAG,UAAU,GAAG,QAAQ,EACxCR,KAAK,CAACS,WAAW,GAAG,gBAAgB,GAAG,2BAA2B,CACnE;MAED,IAAIT,KAAK,CAACU,IAAI,EAAE;QACdJ,IAAI,CAACK,IAAI,CAAC,OAAO,CAAC;MACpB;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGf,QAAQ,CAAC,MAAMQ,KAAK,CAACY,OAAO,GAAG,QAAQ,GAAGZ,KAAK,CAACa,IAAI,CAAC;IAE1E,MAAMC,YAAY,GAAGtB,QAAQ,CAAC,MAAMQ,KAAK,CAACa,IAAI,KAAK,UAAU,GAAG,QAAQ,GAAG,MAAM,CAAC;IAElF,MAAME,KAAK,GAAGnB,QAAQ,CAAC,CAAC;IAExB,MAAMoB,OAAO,GAAGvB,GAAG,CAAC,IAAI,CAAC;IAEzB,IAAIO,KAAK,CAACiB,UAAU,EAAE;MACpB,MAAMC,cAAc,GAAGC,CAAC,IAAI;QAC1B,IAAIA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,GAAG,KAAK,GAAG,EAAE;UAC9BF,CAAC,CAACG,cAAc,CAAC,CAAC;UAClBN,OAAO,CAACb,KAAK,CAACoB,KAAK,CAAC,CAAC;QACvB,CAAC,MAAM,IAAIJ,CAAC,CAACE,GAAG,KAAK,QAAQ,EAAE;UAC7BL,OAAO,CAACb,KAAK,CAACqB,IAAI,CAAC,CAAC;QACtB;MACF,CAAC;MAED9B,SAAS,CAAC,MAAM;QACd,IAAI,CAACqB,KAAK,CAACU,KAAK,CAACC,sBAAsB,EAAE;UACvCC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEV,cAAc,CAAC;UAElDH,KAAK,CAACc,MAAM,CAAC,OAAO,EAAE;YACpBR,GAAG,EAAE,wBAAwB;YAC7BlB,KAAK,EAAE;UACT,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;QAAA;MAEJ,CAAC,CAAC;MAEFR,eAAe,CAAC,MAAM;QACpBgC,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAEZ,cAAc,CAAC;QAErDH,KAAK,CAACc,MAAM,CAAC,OAAO,EAAE;UACpBR,GAAG,EAAE,wBAAwB;UAC7BlB,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ","names":["computed","ref","onMounted","onBeforeUnmount","useStore","ControlIcon","computedValue","get","props","modelValue","set","value","emit","inputElClass","base","computedType","borderless","transparent","icon","push","options","type","controlIconH","store","inputEl","ctrlKFocus","fieldFocusHook","e","ctrlKey","key","preventDefault","focus","blur","state","isFieldFocusRegistered","window","addEventListener","commit","removeEventListener"],"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/Control.vue"],"sourcesContent":["<script setup>\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { useStore } from 'vuex'\nimport ControlIcon from '@/components/ControlIcon.vue'\n\nconst props = defineProps({\n  name: {\n    type: String,\n    default: null\n  },\n  id: {\n    type: String,\n    default: null\n  },\n  autocomplete: {\n    type: String,\n    default: null\n  },\n  placeholder: {\n    type: String,\n    default: null\n  },\n  icon: {\n    type: String,\n    default: null\n  },\n  options: {\n    type: Array,\n    default: null\n  },\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelValue: {\n    type: [String, Number, Boolean, Array, Object],\n    default: ''\n  },\n  required: Boolean,\n  borderless: Boolean,\n  transparent: Boolean,\n  ctrlKFocus: Boolean\n})\n\nconst emit = defineEmits(['update:modelValue', 'right-icon-click'])\n\nconst computedValue = computed({\n  get: () => props.modelValue,\n  set: value => {\n    emit('update:modelValue', value)\n  }\n})\n\nconst inputElClass = computed(() => {\n  const base = [\n    'px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full',\n    'dark:placeholder-gray-400',\n    computedType.value === 'textarea' ? 'h-24' : 'h-12',\n    props.borderless ? 'border-0' : 'border',\n    props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'\n  ]\n\n  if (props.icon) {\n    base.push('pl-10')\n  }\n\n  return base\n})\n\nconst computedType = computed(() => props.options ? 'select' : props.type)\n\nconst controlIconH = computed(() => props.type === 'textarea' ? 'h-full' : 'h-12')\n\nconst store = useStore()\n\nconst inputEl = ref(null)\n\nif (props.ctrlKFocus) {\n  const fieldFocusHook = e => {\n    if (e.ctrlKey && e.key === 'k') {\n      e.preventDefault()\n      inputEl.value.focus()\n    } else if (e.key === 'Escape') {\n      inputEl.value.blur()\n    }\n  }\n\n  onMounted(() => {\n    if (!store.state.isFieldFocusRegistered) {\n      window.addEventListener('keydown', fieldFocusHook)\n\n      store.commit('basic', {\n        key: 'isFieldFocusRegistered',\n        value: true\n      })\n    } else {\n      // console.error('Duplicate field focus event')\n    }\n  })\n\n  onBeforeUnmount(() => {\n    window.removeEventListener('keydown', fieldFocusHook)\n\n    store.commit('basic', {\n      key: 'isFieldFocusRegistered',\n      value: false\n    })\n  })\n}\n</script>\n\n<template>\n  <div class=\"relative\">\n    <select\n      v-if=\"computedType === 'select'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :class=\"inputElClass\"\n    >\n      <option\n        v-for=\"option in options\"\n        :key=\"option.id ?? option\"\n        :value=\"option\"\n      >\n        {{ option.label ?? option }}\n      </option>\n    </select>\n    <textarea\n      v-else-if=\"computedType === 'textarea'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :class=\"inputElClass\"\n      :name=\"name\"\n      :placeholder=\"placeholder\"\n      :required=\"required\"\n    />\n    <input\n      v-else\n      :id=\"id\"\n      ref=\"inputEl\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :autocomplete=\"autocomplete\"\n      :required=\"required\"\n      :placeholder=\"placeholder\"\n      :type=\"computedType\"\n      :class=\"inputElClass\"\n    >\n    <control-icon\n      v-if=\"icon\"\n      :icon=\"icon\"\n      :h=\"controlIconH\"\n    />\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}