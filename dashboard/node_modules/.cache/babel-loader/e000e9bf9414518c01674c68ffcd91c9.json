{"ast":null,"code":"import { useStore } from 'vuex';\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js';\nimport NavBarItem from '@/components/NavBarItem.vue';\nimport Icon from '@/components/Icon.vue';\nexport default {\n  props: {\n    hasDivider: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const store = useStore();\n    const lightBorderStyle = computed(() => store.state.lightBorderStyle);\n    const navBarMenuListUpperLabelStyle = computed(() => store.state.navBarMenuListUpperLabelStyle);\n    const isDropdownActive = ref(false);\n    const toggleDropdownIcon = computed(() => isDropdownActive.value ? mdiChevronUp : mdiChevronDown);\n    const toggle = () => {\n      isDropdownActive.value = !isDropdownActive.value;\n    };\n    const root = ref(null);\n    const forceClose = event => {\n      if (!root.value.$el.contains(event.target)) {\n        isDropdownActive.value = false;\n      }\n    };\n    onMounted(() => {\n      window.addEventListener('click', forceClose);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('click', forceClose);\n    });\n    const __returned__ = {\n      store,\n      lightBorderStyle,\n      navBarMenuListUpperLabelStyle,\n      isDropdownActive,\n      toggleDropdownIcon,\n      toggle,\n      root,\n      forceClose,\n      useStore,\n      computed,\n      ref,\n      onMounted,\n      onBeforeUnmount,\n      mdiChevronUp,\n      mdiChevronDown,\n      NavBarItem,\n      Icon\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["useStore","computed","ref","onMounted","onBeforeUnmount","mdiChevronUp","mdiChevronDown","NavBarItem","Icon","store","lightBorderStyle","state","navBarMenuListUpperLabelStyle","isDropdownActive","toggleDropdownIcon","value","toggle","root","forceClose","event","$el","contains","target","window","addEventListener","removeEventListener"],"sources":["/Users/jasongreenberg/Desktop/dashboard copy/vue-admin-dashboard/src/components/NavBarMenu.vue"],"sourcesContent":["<script setup>\nimport { useStore } from 'vuex'\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js'\nimport NavBarItem from '@/components/NavBarItem.vue'\nimport Icon from '@/components/Icon.vue'\n\ndefineProps({\n  hasDivider: {\n    type: Boolean,\n    default: false\n  }\n})\n\nconst store = useStore()\n\nconst lightBorderStyle = computed(() => store.state.lightBorderStyle)\n\nconst navBarMenuListUpperLabelStyle = computed(() => store.state.navBarMenuListUpperLabelStyle)\n\nconst isDropdownActive = ref(false)\n\nconst toggleDropdownIcon = computed(() => isDropdownActive.value ? mdiChevronUp : mdiChevronDown)\n\nconst toggle = () => {\n  isDropdownActive.value = !isDropdownActive.value\n}\n\nconst root = ref(null)\n\nconst forceClose = event => {\n  if (!root.value.$el.contains(event.target)) {\n    isDropdownActive.value = false\n  }\n}\n\nonMounted(() => {\n  window.addEventListener('click', forceClose)\n})\n\nonBeforeUnmount(() => {\n  window.removeEventListener('click', forceClose)\n})\n</script>\n\n<template>\n  <nav-bar-item\n    ref=\"root\"\n    type=\"block\"\n    :has-divider=\"hasDivider\"\n    :active=\"isDropdownActive\"\n    dropdown\n    class=\"dropdown\"\n    @click=\"toggle\"\n  >\n    <a\n      class=\"flex items-center py-2 px-3 dark:bg-gray-800 lg:bg-transparent lg:dark:bg-transparent\"\n      :class=\"[ navBarMenuListUpperLabelStyle ]\"\n    >\n      <slot />\n      <icon\n        :path=\"toggleDropdownIcon\"\n        class=\"hidden lg:inline-flex transition-colors\"\n      />\n    </a>\n    <div\n      class=\"text-sm border-b lg:border-b-0 lg:border-gray-200 lg:border-t lg:bg-white lg:absolute\n          lg:top-full lg:left-0 lg:min-w-full lg:z-20 lg:shadow-md lg:rounded-b lg:dark:bg-gray-800\n          dark:border-gray-700\"\n      :class=\"[lightBorderStyle, {'lg:hidden':!isDropdownActive}]\"\n    >\n      <slot name=\"dropdown\" />\n    </div>\n  </nav-bar-item>\n</template>\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,MAAM;AAC/B,SAASC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,EAAEC,eAAe,QAAQ,KAAK;AAC/D,SAASC,YAAY,EAAEC,cAAc,QAAQ,SAAS;AACtD,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,IAAI,MAAM,uBAAuB;;;;;;;;;;;;IASxC,MAAMC,KAAK,GAAGT,QAAQ,CAAC,CAAC;IAExB,MAAMU,gBAAgB,GAAGT,QAAQ,CAAC,MAAMQ,KAAK,CAACE,KAAK,CAACD,gBAAgB,CAAC;IAErE,MAAME,6BAA6B,GAAGX,QAAQ,CAAC,MAAMQ,KAAK,CAACE,KAAK,CAACC,6BAA6B,CAAC;IAE/F,MAAMC,gBAAgB,GAAGX,GAAG,CAAC,KAAK,CAAC;IAEnC,MAAMY,kBAAkB,GAAGb,QAAQ,CAAC,MAAMY,gBAAgB,CAACE,KAAK,GAAGV,YAAY,GAAGC,cAAc,CAAC;IAEjG,MAAMU,MAAM,GAAGA,CAAA,KAAM;MACnBH,gBAAgB,CAACE,KAAK,GAAG,CAACF,gBAAgB,CAACE,KAAK;IAClD,CAAC;IAED,MAAME,IAAI,GAAGf,GAAG,CAAC,IAAI,CAAC;IAEtB,MAAMgB,UAAU,GAAGC,KAAK,IAAI;MAC1B,IAAI,CAACF,IAAI,CAACF,KAAK,CAACK,GAAG,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QAC1CT,gBAAgB,CAACE,KAAK,GAAG,KAAK;MAChC;IACF,CAAC;IAEDZ,SAAS,CAAC,MAAM;MACdoB,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEN,UAAU,CAAC;IAC9C,CAAC,CAAC;IAEFd,eAAe,CAAC,MAAM;MACpBmB,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEP,UAAU,CAAC;IACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}