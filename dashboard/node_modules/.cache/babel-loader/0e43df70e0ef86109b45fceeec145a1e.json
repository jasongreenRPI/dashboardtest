{"ast":null,"code":"import { useStore } from 'vuex';\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js';\nimport NavBarItem from '@/components/NavBarItem.vue';\nimport Icon from '@/components/Icon.vue';\nexport default {\n  props: {\n    hasDivider: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    expose();\n    var store = useStore();\n    var lightBorderStyle = computed(function () {\n      return store.state.lightBorderStyle;\n    });\n    var navBarMenuListUpperLabelStyle = computed(function () {\n      return store.state.navBarMenuListUpperLabelStyle;\n    });\n    var isDropdownActive = ref(false);\n    var toggleDropdownIcon = computed(function () {\n      return isDropdownActive.value ? mdiChevronUp : mdiChevronDown;\n    });\n\n    var toggle = function toggle() {\n      isDropdownActive.value = !isDropdownActive.value;\n    };\n\n    var root = ref(null);\n\n    var forceClose = function forceClose(event) {\n      if (!root.value.$el.contains(event.target)) {\n        isDropdownActive.value = false;\n      }\n    };\n\n    onMounted(function () {\n      window.addEventListener('click', forceClose);\n    });\n    onBeforeUnmount(function () {\n      window.removeEventListener('click', forceClose);\n    });\n    var __returned__ = {\n      store: store,\n      lightBorderStyle: lightBorderStyle,\n      navBarMenuListUpperLabelStyle: navBarMenuListUpperLabelStyle,\n      isDropdownActive: isDropdownActive,\n      toggleDropdownIcon: toggleDropdownIcon,\n      toggle: toggle,\n      root: root,\n      forceClose: forceClose,\n      useStore: useStore,\n      computed: computed,\n      ref: ref,\n      onMounted: onMounted,\n      onBeforeUnmount: onBeforeUnmount,\n      mdiChevronUp: mdiChevronUp,\n      mdiChevronDown: mdiChevronDown,\n      NavBarItem: NavBarItem,\n      Icon: Icon\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,SAAxB,EAAmCC,eAAnC,QAA0D,KAA1D;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,SAA7C;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;;;;;;;;;;AASA,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AAEA,QAAMU,gBAAgB,GAAGT,QAAQ,CAAC;AAAA,aAAMQ,KAAK,CAACE,KAAN,CAAYD,gBAAlB;AAAA,KAAD,CAAjC;AAEA,QAAME,6BAA6B,GAAGX,QAAQ,CAAC;AAAA,aAAMQ,KAAK,CAACE,KAAN,CAAYC,6BAAlB;AAAA,KAAD,CAA9C;AAEA,QAAMC,gBAAgB,GAAGX,GAAG,CAAC,KAAD,CAA5B;AAEA,QAAMY,kBAAkB,GAAGb,QAAQ,CAAC;AAAA,aAAMY,gBAAgB,CAACE,KAAjB,GAAyBV,YAAzB,GAAwCC,cAA9C;AAAA,KAAD,CAAnC;;AAEA,QAAMU,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBH,sBAAgB,CAACE,KAAjB,GAAyB,CAACF,gBAAgB,CAACE,KAA3C;AACD,KAFD;;AAIA,QAAME,IAAI,GAAGf,GAAG,CAAC,IAAD,CAAhB;;AAEA,QAAMgB,UAAU,GAAG,SAAbA,UAAa,MAAK,EAAI;AAC1B,UAAI,CAACD,IAAI,CAACF,KAAL,CAAWI,GAAX,CAAeC,QAAf,CAAwBC,KAAK,CAACC,MAA9B,CAAL,EAA4C;AAC1CT,wBAAgB,CAACE,KAAjB,GAAyB,KAAzB;AACD;AACF,KAJD;;AAMAZ,aAAS,CAAC,YAAM;AACdoB,YAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCN,UAAjC;AACD,KAFQ,CAAT;AAIAd,mBAAe,CAAC,YAAM;AACpBmB,YAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCP,UAApC;AACD,KAFc,CAAf","names":["useStore","computed","ref","onMounted","onBeforeUnmount","mdiChevronUp","mdiChevronDown","NavBarItem","Icon","store","lightBorderStyle","state","navBarMenuListUpperLabelStyle","isDropdownActive","toggleDropdownIcon","value","toggle","root","forceClose","$el","contains","event","target","window","addEventListener","removeEventListener"],"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/NavBarMenu.vue"],"sourcesContent":["<script setup>\nimport { useStore } from 'vuex'\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js'\nimport NavBarItem from '@/components/NavBarItem.vue'\nimport Icon from '@/components/Icon.vue'\n\ndefineProps({\n  hasDivider: {\n    type: Boolean,\n    default: false\n  }\n})\n\nconst store = useStore()\n\nconst lightBorderStyle = computed(() => store.state.lightBorderStyle)\n\nconst navBarMenuListUpperLabelStyle = computed(() => store.state.navBarMenuListUpperLabelStyle)\n\nconst isDropdownActive = ref(false)\n\nconst toggleDropdownIcon = computed(() => isDropdownActive.value ? mdiChevronUp : mdiChevronDown)\n\nconst toggle = () => {\n  isDropdownActive.value = !isDropdownActive.value\n}\n\nconst root = ref(null)\n\nconst forceClose = event => {\n  if (!root.value.$el.contains(event.target)) {\n    isDropdownActive.value = false\n  }\n}\n\nonMounted(() => {\n  window.addEventListener('click', forceClose)\n})\n\nonBeforeUnmount(() => {\n  window.removeEventListener('click', forceClose)\n})\n</script>\n\n<template>\n  <nav-bar-item\n    ref=\"root\"\n    type=\"block\"\n    :has-divider=\"hasDivider\"\n    :active=\"isDropdownActive\"\n    dropdown\n    class=\"dropdown\"\n    @click=\"toggle\"\n  >\n    <a\n      class=\"flex items-center py-2 px-3 dark:bg-gray-800 lg:bg-transparent lg:dark:bg-transparent\"\n      :class=\"[ navBarMenuListUpperLabelStyle ]\"\n    >\n      <slot />\n      <icon\n        :path=\"toggleDropdownIcon\"\n        class=\"hidden lg:inline-flex transition-colors\"\n      />\n    </a>\n    <div\n      class=\"text-sm border-b lg:border-b-0 lg:border-gray-200 lg:border-t lg:bg-white lg:absolute\n          lg:top-full lg:left-0 lg:min-w-full lg:z-20 lg:shadow-md lg:rounded-b lg:dark:bg-gray-800\n          dark:border-gray-700\"\n      :class=\"[lightBorderStyle, {'lg:hidden':!isDropdownActive}]\"\n    >\n      <slot name=\"dropdown\" />\n    </div>\n  </nav-bar-item>\n</template>\n"]},"metadata":{},"sourceType":"module"}