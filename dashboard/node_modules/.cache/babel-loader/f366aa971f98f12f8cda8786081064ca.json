{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { computed, ref, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { mdiAccountMultiple, mdiMonitorCellphone, mdiRobot, mdiOfficeBuilding, mdiCheck } from \"@mdi/js\";\nimport MainSection from \"@/components/MainSection.vue\";\nimport TitleBar from \"@/components/TitleBar.vue\";\nimport HeroBar from \"@/components/HeroBar.vue\";\nimport CardWidget from \"@/components/CardWidget.vue\";\nimport CardComponent from \"@/components/CardComponent.vue\";\nimport ClientsTable from \"@/components/ClientsTable.vue\";\nimport Notification from \"@/components/Notification.vue\";\nimport TitleSubBar from \"@/components/TitleSubBar.vue\";\nexport default {\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    expose();\n    var store = useStore();\n    var titleStack = computed(function () {\n      var _store$getters$select;\n      var orgName = ((_store$getters$select = store.getters.selectedOrganization) === null || _store$getters$select === void 0 ? void 0 : _store$getters$select.name) || \"\";\n      return [\"Admin\", \"Dashboard\", orgName];\n    });\n    var selectedOrganization = computed(function () {\n      return store.getters.selectedOrganization || {};\n    });\n    var organizationJobs = computed(function () {\n      var _selectedOrganization;\n      return ((_selectedOrganization = selectedOrganization.value) === null || _selectedOrganization === void 0 ? void 0 : _selectedOrganization.jobs) || [];\n    });\n    var selectedJob = ref(null);\n    var selectedJobApplications = computed(function () {\n      if (!selectedJob.value) return [];\n      return selectedJob.value.applications || [];\n    });\n    console.log(selectedJobApplications.value);\n    var selectedJobApplicationsCount = computed(function () {\n      return selectedJobApplications.value.length;\n    });\n\n    // Mock data for config status - in a real app, this would come from the store\n    var jobChatbotConfigStatus = ref(\"Not Setup\");\n    var orgChatbotConfigStatus = ref(\"Setup\");\n\n    // Function to handle gear icon click\n    var handleConfigClick = function handleConfigClick(type) {\n      // For now, just navigate to \"#\"\n      window.location.href = \"#\";\n    };\n\n    // Initialize data\n    onMounted(function () {\n      // Make sure organizations are initialized\n      if (!store.state.userOrganizations.length) {\n        store.dispatch(\"initializeOrganizations\");\n      }\n      // Set first job as default when component mounts or organization changes\n      if (organizationJobs.value.length > 0) {\n        selectedJob.value = organizationJobs.value[0];\n      }\n    });\n\n    // Watch for organization changes to update selected job\n    watch(function () {\n      return selectedOrganization.value;\n    }, function (newOrg) {\n      var _newOrg$jobs;\n      if ((newOrg === null || newOrg === void 0 || (_newOrg$jobs = newOrg.jobs) === null || _newOrg$jobs === void 0 ? void 0 : _newOrg$jobs.length) > 0) {\n        selectedJob.value = newOrg.jobs[0];\n      } else {\n        selectedJob.value = null;\n      }\n    });\n    var __returned__ = {\n      store: store,\n      titleStack: titleStack,\n      selectedOrganization: selectedOrganization,\n      organizationJobs: organizationJobs,\n      selectedJob: selectedJob,\n      selectedJobApplications: selectedJobApplications,\n      selectedJobApplicationsCount: selectedJobApplicationsCount,\n      jobChatbotConfigStatus: jobChatbotConfigStatus,\n      orgChatbotConfigStatus: orgChatbotConfigStatus,\n      handleConfigClick: handleConfigClick,\n      computed: computed,\n      ref: ref,\n      onMounted: onMounted,\n      watch: watch,\n      useStore: useStore,\n      mdiAccountMultiple: mdiAccountMultiple,\n      mdiMonitorCellphone: mdiMonitorCellphone,\n      mdiRobot: mdiRobot,\n      mdiOfficeBuilding: mdiOfficeBuilding,\n      mdiCheck: mdiCheck,\n      MainSection: MainSection,\n      TitleBar: TitleBar,\n      HeroBar: HeroBar,\n      CardWidget: CardWidget,\n      CardComponent: CardComponent,\n      ClientsTable: ClientsTable,\n      Notification: Notification,\n      TitleSubBar: TitleSubBar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","onMounted","watch","useStore","mdiAccountMultiple","mdiMonitorCellphone","mdiRobot","mdiOfficeBuilding","mdiCheck","MainSection","TitleBar","HeroBar","CardWidget","CardComponent","ClientsTable","Notification","TitleSubBar","store","titleStack","_store$getters$select","orgName","getters","selectedOrganization","name","organizationJobs","_selectedOrganization","value","jobs","selectedJob","selectedJobApplications","applications","console","log","selectedJobApplicationsCount","length","jobChatbotConfigStatus","orgChatbotConfigStatus","handleConfigClick","type","window","location","href","state","userOrganizations","dispatch","newOrg","_newOrg$jobs"],"sources":["/Users/jasongreenberg/Desktop/testdashboard/dashboardtest/dashboard/src/views/Home.vue"],"sourcesContent":["<script setup>\nimport { computed, ref, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport {\n  mdiAccountMultiple,\n  mdiMonitorCellphone,\n  mdiRobot,\n  mdiOfficeBuilding,\n  mdiCheck,\n} from \"@mdi/js\";\nimport MainSection from \"@/components/MainSection.vue\";\nimport TitleBar from \"@/components/TitleBar.vue\";\nimport HeroBar from \"@/components/HeroBar.vue\";\nimport CardWidget from \"@/components/CardWidget.vue\";\nimport CardComponent from \"@/components/CardComponent.vue\";\nimport ClientsTable from \"@/components/ClientsTable.vue\";\nimport Notification from \"@/components/Notification.vue\";\nimport TitleSubBar from \"@/components/TitleSubBar.vue\";\n\nconst store = useStore();\n\nconst titleStack = computed(() => {\n  const orgName = store.getters.selectedOrganization?.name || \"\";\n  return [\"Admin\", \"Dashboard\", orgName];\n});\n\nconst selectedOrganization = computed(\n  () => store.getters.selectedOrganization || {}\n);\n\nconst organizationJobs = computed(() => selectedOrganization.value?.jobs || []);\n\nconst selectedJob = ref(null);\n\nconst selectedJobApplications = computed(() => {\n  if (!selectedJob.value) return [];\n  return selectedJob.value.applications || [];\n});\n\nconsole.log(selectedJobApplications.value);\n\nconst selectedJobApplicationsCount = computed(\n  () => selectedJobApplications.value.length\n);\n\n// Mock data for config status - in a real app, this would come from the store\nconst jobChatbotConfigStatus = ref(\"Not Setup\");\nconst orgChatbotConfigStatus = ref(\"Setup\");\n\n// Function to handle gear icon click\nconst handleConfigClick = (type) => {\n  // For now, just navigate to \"#\"\n  window.location.href = \"#\";\n};\n\n// Initialize data\nonMounted(() => {\n  // Make sure organizations are initialized\n  if (!store.state.userOrganizations.length) {\n    store.dispatch(\"initializeOrganizations\");\n  }\n  // Set first job as default when component mounts or organization changes\n  if (organizationJobs.value.length > 0) {\n    selectedJob.value = organizationJobs.value[0];\n  }\n});\n\n// Watch for organization changes to update selected job\nwatch(\n  () => selectedOrganization.value,\n  (newOrg) => {\n    if (newOrg?.jobs?.length > 0) {\n      selectedJob.value = newOrg.jobs[0];\n    } else {\n      selectedJob.value = null;\n    }\n  }\n);\n</script>\n\n<template>\n  <title-bar :title-stack=\"titleStack\" />\n  <hero-bar>\n    <div class=\"flex items-center space-x-4\">\n      <span>Job Posting Dashboard</span>\n      <select\n        v-if=\"organizationJobs.length\"\n        v-model=\"selectedJob\"\n        class=\"rounded-lg border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-300\"\n      >\n        <option v-for=\"job in organizationJobs\" :key=\"job.id\" :value=\"job\">\n          {{ job.id }}\n        </option>\n      </select>\n    </div>\n  </hero-bar>\n  <main-section>\n    <div class=\"grid grid-cols-1 gap-6 lg:grid-cols-3 mb-6\">\n      <card-widget\n        trend=\"12%\"\n        trend-type=\"up\"\n        color=\"text-emerald-500\"\n        :icon=\"mdiAccountMultiple\"\n        :number=\"selectedJobApplicationsCount\"\n        :label=\"'Applications for ' + (selectedJob?.name || 'All Jobs')\"\n      />\n      <card-widget\n        :icon=\"mdiRobot\"\n        :label=\"'Config: ' + (selectedJob?.id || 'No Job Selected')\"\n        :trend=\"jobChatbotConfigStatus\"\n        :trend-type=\"jobChatbotConfigStatus === 'Setup' ? 'up' : 'alert'\"\n        :trend-icon=\"jobChatbotConfigStatus === 'Setup' ? mdiCheck : null\"\n        color=\"text-blue-500\"\n        @config-click=\"handleConfigClick('job')\"\n      />\n      <card-widget\n        :icon=\"mdiOfficeBuilding\"\n        :label=\"'Config: ' + (selectedOrganization?.name || 'No Organization')\"\n        :trend=\"orgChatbotConfigStatus\"\n        :trend-type=\"orgChatbotConfigStatus === 'Setup' ? 'up' : 'alert'\"\n        :trend-icon=\"orgChatbotConfigStatus === 'Setup' ? mdiCheck : null\"\n        color=\"text-purple-500\"\n        @config-click=\"handleConfigClick('org')\"\n      />\n    </div>\n\n    <title-sub-bar\n      :icon=\"mdiMonitorCellphone\"\n      :title=\"`Applications for ${selectedJob?.name || 'All Jobs'}`\"\n    />\n\n    <notification color=\"info\" :icon=\"mdiMonitorCellphone\">\n      Click on applicants to view the interview prep doc or the analytics sheet.\n    </notification>\n\n    <card-component :icon=\"mdiMonitorCellphone\" title=\"Applicants\" has-table>\n      <clients-table :checkable=\"false\" :items=\"selectedJobApplications\" />\n    </card-component>\n  </main-section>\n</template>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}