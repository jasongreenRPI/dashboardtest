{"ast":null,"code":"import _objectSpread from \"/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { mdiEye, mdiTrashCan } from \"@mdi/js\";\nimport ModalBox from \"@/components/ModalBox.vue\";\nimport CheckboxCell from \"@/components/CheckboxCell.vue\";\nimport Level from \"@/components/Level.vue\";\nimport JbButtons from \"@/components/JbButtons.vue\";\nimport JbButton from \"@/components/JbButton.vue\";\nimport UserAvatar from \"@/components/UserAvatar.vue\";\nexport default {\n  props: {\n    checkable: Boolean\n  },\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    expose();\n    var store = useStore();\n    var lightBorderStyle = computed(function () {\n      return store.state.lightBorderStyle;\n    });\n    var lightBgStyle = computed(function () {\n      return store.state.lightBgStyle;\n    });\n    var tableTrStyle = computed(function () {\n      return store.state.tableTrStyle;\n    });\n    var tableTrOddStyle = computed(function () {\n      return store.state.tableTrOddStyle;\n    });\n    var darkMode = computed(function () {\n      return store.state.darkMode;\n    }); // Get the selected organization and its applicants\n\n    var selectedOrganization = computed(function () {\n      return store.getters.selectedOrganization;\n    });\n    var items = computed(function () {\n      var org = selectedOrganization.value;\n      if (!org || !org.jobs) return []; // Flatten all applicants from all jobs\n\n      return org.jobs.reduce(function (allApplicants, job) {\n        if (job.applicants) {\n          allApplicants.push.apply(allApplicants, _toConsumableArray(job.applicants.map(function (applicant) {\n            return _objectSpread(_objectSpread({}, applicant), {}, {\n              jobTitle: job.title // Add job title to each applicant\n\n            });\n          })));\n        }\n\n        return allApplicants;\n      }, []);\n    });\n    var isModalActive = ref(false);\n    var isModalDangerActive = ref(false);\n    var perPage = ref(10);\n    var currentPage = ref(0);\n    var checkedRows = ref([]);\n    var itemsPaginated = computed(function () {\n      return items.value.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1));\n    });\n    var numPages = computed(function () {\n      return Math.ceil(items.value.length / perPage.value);\n    });\n    var currentPageHuman = computed(function () {\n      return currentPage.value + 1;\n    });\n    var pagesList = computed(function () {\n      var pagesList = [];\n\n      for (var i = 0; i < numPages.value; i++) {\n        pagesList.push(i);\n      }\n\n      return pagesList;\n    });\n\n    var remove = function remove(arr, cb) {\n      var newArr = [];\n      arr.forEach(function (item) {\n        if (!cb(item)) {\n          newArr.push(item);\n        }\n      });\n      return newArr;\n    };\n\n    var checked = function checked(isChecked, client) {\n      if (isChecked) {\n        checkedRows.value.push(client);\n      } else {\n        checkedRows.value = remove(checkedRows.value, function (row) {\n          return row.id === client.id;\n        });\n      }\n    };\n\n    var __returned__ = {\n      store: store,\n      lightBorderStyle: lightBorderStyle,\n      lightBgStyle: lightBgStyle,\n      tableTrStyle: tableTrStyle,\n      tableTrOddStyle: tableTrOddStyle,\n      darkMode: darkMode,\n      selectedOrganization: selectedOrganization,\n      items: items,\n      isModalActive: isModalActive,\n      isModalDangerActive: isModalDangerActive,\n      perPage: perPage,\n      currentPage: currentPage,\n      checkedRows: checkedRows,\n      itemsPaginated: itemsPaginated,\n      numPages: numPages,\n      currentPageHuman: currentPageHuman,\n      pagesList: pagesList,\n      remove: remove,\n      checked: checked,\n      computed: computed,\n      ref: ref,\n      useStore: useStore,\n      mdiEye: mdiEye,\n      mdiTrashCan: mdiTrashCan,\n      ModalBox: ModalBox,\n      CheckboxCell: CheckboxCell,\n      Level: Level,\n      JbButtons: JbButtons,\n      JbButton: JbButton,\n      UserAvatar: UserAvatar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","useStore","mdiEye","mdiTrashCan","ModalBox","CheckboxCell","Level","JbButtons","JbButton","UserAvatar","store","lightBorderStyle","state","lightBgStyle","tableTrStyle","tableTrOddStyle","darkMode","selectedOrganization","getters","items","org","value","jobs","reduce","allApplicants","job","applicants","push","map","applicant","jobTitle","title","isModalActive","isModalDangerActive","perPage","currentPage","checkedRows","itemsPaginated","slice","numPages","Math","ceil","length","currentPageHuman","pagesList","i","remove","arr","cb","newArr","forEach","item","checked","isChecked","client","row","id"],"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/ClientsTable.vue"],"sourcesContent":["<script setup>\nimport { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { mdiEye, mdiTrashCan } from \"@mdi/js\";\nimport ModalBox from \"@/components/ModalBox.vue\";\nimport CheckboxCell from \"@/components/CheckboxCell.vue\";\nimport Level from \"@/components/Level.vue\";\nimport JbButtons from \"@/components/JbButtons.vue\";\nimport JbButton from \"@/components/JbButton.vue\";\nimport UserAvatar from \"@/components/UserAvatar.vue\";\n\ndefineProps({\n  checkable: Boolean,\n});\n\nconst store = useStore();\n\nconst lightBorderStyle = computed(() => store.state.lightBorderStyle);\nconst lightBgStyle = computed(() => store.state.lightBgStyle);\nconst tableTrStyle = computed(() => store.state.tableTrStyle);\nconst tableTrOddStyle = computed(() => store.state.tableTrOddStyle);\nconst darkMode = computed(() => store.state.darkMode);\n\n// Get the selected organization and its applicants\nconst selectedOrganization = computed(() => store.getters.selectedOrganization);\nconst items = computed(() => {\n  const org = selectedOrganization.value;\n  if (!org || !org.jobs) return [];\n\n  // Flatten all applicants from all jobs\n  return org.jobs.reduce((allApplicants, job) => {\n    if (job.applicants) {\n      allApplicants.push(\n        ...job.applicants.map((applicant) => ({\n          ...applicant,\n          jobTitle: job.title, // Add job title to each applicant\n        }))\n      );\n    }\n    return allApplicants;\n  }, []);\n});\n\nconst isModalActive = ref(false);\nconst isModalDangerActive = ref(false);\nconst perPage = ref(10);\nconst currentPage = ref(0);\nconst checkedRows = ref([]);\n\nconst itemsPaginated = computed(() =>\n  items.value.slice(\n    perPage.value * currentPage.value,\n    perPage.value * (currentPage.value + 1)\n  )\n);\n\nconst numPages = computed(() => Math.ceil(items.value.length / perPage.value));\nconst currentPageHuman = computed(() => currentPage.value + 1);\n\nconst pagesList = computed(() => {\n  const pagesList = [];\n  for (let i = 0; i < numPages.value; i++) {\n    pagesList.push(i);\n  }\n  return pagesList;\n});\n\nconst remove = (arr, cb) => {\n  const newArr = [];\n  arr.forEach((item) => {\n    if (!cb(item)) {\n      newArr.push(item);\n    }\n  });\n  return newArr;\n};\n\nconst checked = (isChecked, client) => {\n  if (isChecked) {\n    checkedRows.value.push(client);\n  } else {\n    checkedRows.value = remove(\n      checkedRows.value,\n      (row) => row.id === client.id\n    );\n  }\n};\n</script>\n\n<template>\n  <modal-box v-model=\"isModalActive\" title=\"Sample modal\">\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </modal-box>\n\n  <modal-box\n    v-model=\"isModalDangerActive\"\n    large-title=\"Please confirm\"\n    button=\"danger\"\n    has-cancel\n  >\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </modal-box>\n\n  <div\n    v-if=\"checkedRows.length\"\n    class=\"bg-opacity-50 p-3 dark:bg-gray-800\"\n    :class=\"lightBgStyle\"\n  >\n    <span\n      v-for=\"checkedRow in checkedRows\"\n      :key=\"checkedRow.id\"\n      class=\"inline-block px-2 py-1 rounded-sm mr-2 text-sm dark:bg-gray-700\"\n      :class=\"lightBgStyle\"\n    >\n      {{ checkedRow.name }}\n    </span>\n  </div>\n\n  <table>\n    <thead>\n      <tr>\n        <th v-if=\"checkable\" />\n        <th />\n        <th>Name</th>\n        <th>Job Title</th>\n        <th>Company</th>\n        <th>City</th>\n        <th>Progress</th>\n        <th>Created</th>\n        <th />\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        v-for=\"(client, index) in itemsPaginated\"\n        :key=\"client.id\"\n        :class=\"[tableTrStyle, index % 2 === 0 ? tableTrOddStyle : '']\"\n      >\n        <checkbox-cell v-if=\"checkable\" @checked=\"checked($event, client)\" />\n        <td class=\"image-cell\">\n          <user-avatar :username=\"client.name\" class=\"image\" />\n        </td>\n        <td data-label=\"Name\">\n          {{ client.name }}\n        </td>\n        <td data-label=\"Job Title\">\n          {{ client.jobTitle }}\n        </td>\n        <td data-label=\"Company\">\n          {{ client.company }}\n        </td>\n        <td data-label=\"City\">\n          {{ client.city }}\n        </td>\n        <td data-label=\"Progress\" class=\"progress-cell\">\n          <progress max=\"100\" :value=\"client.progress\">\n            {{ client.progress }}\n          </progress>\n        </td>\n        <td data-label=\"Created\">\n          <small\n            class=\"text-gray-500 dark:text-gray-400\"\n            :title=\"client.created\"\n            >{{ client.created }}</small\n          >\n        </td>\n        <td class=\"actions-cell\">\n          <jb-buttons type=\"justify-start lg:justify-end\" no-wrap>\n            <jb-button\n              color=\"info\"\n              :icon=\"mdiEye\"\n              small\n              @click=\"isModalActive = true\"\n            />\n            <jb-button\n              color=\"danger\"\n              :icon=\"mdiTrashCan\"\n              small\n              @click=\"isModalDangerActive = true\"\n            />\n          </jb-buttons>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div\n    :class=\"lightBorderStyle\"\n    class=\"p-3 lg:px-6 border-t dark:border-gray-800\"\n  >\n    <level>\n      <jb-buttons>\n        <jb-button\n          v-for=\"page in pagesList\"\n          :key=\"page\"\n          :active=\"page === currentPage\"\n          :label=\"page + 1\"\n          :outline=\"darkMode\"\n          small\n          @click=\"currentPage = page\"\n        />\n      </jb-buttons>\n      <small>Page {{ currentPageHuman }} of {{ numPages }}</small>\n    </level>\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}