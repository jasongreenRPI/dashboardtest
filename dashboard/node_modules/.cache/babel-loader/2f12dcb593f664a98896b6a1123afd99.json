{"ast":null,"code":"import { mdiUpload } from '@mdi/js';\nimport { computed, ref, watch } from 'vue';\nimport JbButton from '@/components/JbButton.vue';\nexport default {\n  props: {\n    modelValue: {\n      type: [Object, File, Array],\n      default: null\n    },\n    label: {\n      type: String,\n      default: 'Upload'\n    },\n    icon: {\n      type: String,\n      default: mdiUpload\n    },\n    accept: {\n      type: String,\n      default: null\n    },\n    color: {\n      type: String,\n      default: 'info'\n    }\n  },\n  emits: ['update:modelValue'],\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n        emit = _ref.emit;\n    expose();\n    var props = __props;\n    var root = ref(null);\n    var file = ref(props.modelValue);\n    var modelValueProp = computed(function () {\n      return props.modelValue;\n    });\n    watch(modelValueProp, function (value) {\n      file.value = value;\n\n      if (!value) {\n        root.value.input.value = null;\n      }\n    });\n\n    var upload = function upload(event) {\n      var value = event.target.files || event.dataTransfer.files;\n      file.value = value[0];\n      emit('update:modelValue', file.value); // Use this as an example for handling file uploads\n      // let formData = new FormData()\n      // formData.append('file', file.value)\n      // const mediaStoreRoute = `/your-route/`\n      // axios\n      //   .post(mediaStoreRoute, formData, {\n      //     headers: {\n      //       'Content-Type': 'multipart/form-data'\n      //     },\n      //     onUploadProgress: progressEvent\n      //   })\n      //   .then(r => {\n      //\n      //   })\n      //   .catch(err => {\n      //\n      //   })\n    }; // const uploadPercent = ref(0)\n    //\n    // const progressEvent = progressEvent => {\n    //   uploadPercent.value = Math.round(\n    //     (progressEvent.loaded * 100) / progressEvent.total\n    //   )\n    // }\n\n\n    var __returned__ = {\n      props: props,\n      emit: emit,\n      root: root,\n      file: file,\n      modelValueProp: modelValueProp,\n      upload: upload,\n      mdiUpload: mdiUpload,\n      computed: computed,\n      ref: ref,\n      watch: watch,\n      JbButton: JbButton\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,SAAT,QAA0B,SAA1B;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,KAAxB,QAAqC,KAArC;AACA,OAAOC,QAAP,MAAqB,2BAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,QAAMC,IAAI,GAAGH,GAAG,CAAC,IAAD,CAAhB;AAEA,QAAMI,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAACC,UAAP,CAAhB;AAEA,QAAMC,cAAc,GAAGR,QAAQ,CAAC;AAAA,aAAMM,KAAK,CAACC,UAAZ;AAAA,KAAD,CAA/B;AAEAL,SAAK,CAACM,cAAD,EAAiB,eAAK,EAAI;AAC7BH,UAAI,CAACI,KAAL,GAAaA,KAAb;;AAEA,UAAI,CAACA,KAAL,EAAY;AACVL,YAAI,CAACK,KAAL,CAAWC,KAAX,CAAiBD,KAAjB,GAAyB,IAAzB;AACD;AACF,KANI,CAAL;;AAQA,QAAME,MAAM,GAAG,SAATA,MAAS,MAAK,EAAI;AACtB,UAAMF,KAAK,GAAGG,KAAK,CAACC,MAAN,CAAaC,KAAb,IAAsBF,KAAK,CAACG,YAAN,CAAmBD,KAAvD;AAEAT,UAAI,CAACI,KAAL,GAAaA,KAAK,CAAC,CAAD,CAAlB;AAEAO,UAAI,CAAC,mBAAD,EAAsBX,IAAI,CAACI,KAA3B,CAAJ,CALsB,CAOtB;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA1BD,EA4BA;AACA;AACA;AACA;AACA;AACA;AACA","names":["mdiUpload","computed","ref","watch","JbButton","root","file","props","modelValue","modelValueProp","value","input","upload","event","target","files","dataTransfer","emit"],"sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/FilePicker.vue"],"sourcesContent":["<script setup>\nimport { mdiUpload } from '@mdi/js'\nimport { computed, ref, watch } from 'vue'\nimport JbButton from '@/components/JbButton.vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: [Object, File, Array],\n    default: null\n  },\n  label: {\n    type: String,\n    default: 'Upload'\n  },\n  icon: {\n    type: String,\n    default: mdiUpload\n  },\n  accept: {\n    type: String,\n    default: null\n  },\n  color: {\n    type: String,\n    default: 'info'\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst root = ref(null)\n\nconst file = ref(props.modelValue)\n\nconst modelValueProp = computed(() => props.modelValue)\n\nwatch(modelValueProp, value => {\n  file.value = value\n\n  if (!value) {\n    root.value.input.value = null\n  }\n})\n\nconst upload = event => {\n  const value = event.target.files || event.dataTransfer.files\n\n  file.value = value[0]\n\n  emit('update:modelValue', file.value)\n\n  // Use this as an example for handling file uploads\n  // let formData = new FormData()\n  // formData.append('file', file.value)\n\n  // const mediaStoreRoute = `/your-route/`\n\n  // axios\n  //   .post(mediaStoreRoute, formData, {\n  //     headers: {\n  //       'Content-Type': 'multipart/form-data'\n  //     },\n  //     onUploadProgress: progressEvent\n  //   })\n  //   .then(r => {\n  //\n  //   })\n  //   .catch(err => {\n  //\n  //   })\n}\n\n// const uploadPercent = ref(0)\n//\n// const progressEvent = progressEvent => {\n//   uploadPercent.value = Math.round(\n//     (progressEvent.loaded * 100) / progressEvent.total\n//   )\n// }\n</script>\n\n<template>\n  <div class=\"flex items-stretch justify-start relative\">\n    <label class=\"inline-flex\">\n      <jb-button\n        as=\"a\"\n        :label=\"label\"\n        :icon=\"icon\"\n        :color=\"color\"\n        :class=\"{ 'rounded-r-none': file }\"\n      />\n      <input\n        ref=\"root\"\n        type=\"file\"\n        class=\"absolute top-0 left-0 w-full h-full opacity-0 outline-none cursor-pointer -z-1\"\n        :accept=\"accept\"\n        @input=\"upload\"\n      >\n    </label>\n    <div v-if=\"file\">\n      <span\n        class=\"inline-flex px-4 py-2 justify-center bg-gray-100 dark:bg-gray-800 border-gray-200 dark:border-gray-700 border rounded-r\"\n      >\n        {{ file.name }}\n      </span>\n    </div>\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}