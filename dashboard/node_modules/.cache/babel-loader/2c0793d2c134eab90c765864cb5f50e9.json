{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, normalizeClass as _normalizeClass, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, vModelText as _vModelText, vModelDynamic as _vModelDynamic, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  class: \"relative\"\n};\nvar _hoisted_2 = [\"id\", \"name\"];\nvar _hoisted_3 = [\"value\"];\nvar _hoisted_4 = [\"id\", \"name\", \"placeholder\", \"required\"];\nvar _hoisted_5 = [\"id\", \"name\", \"autocomplete\", \"required\", \"placeholder\", \"type\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.computedType === 'select' ? _withDirectives((_openBlock(), _createElementBlock(\"select\", {\n    key: 0,\n    id: $props.id,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $setup.computedValue = $event;\n    }),\n    name: $props.name,\n    class: _normalizeClass($setup.inputElClass)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.options, function (option) {\n    var _option$id, _option$label;\n\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: (_option$id = option.id) !== null && _option$id !== void 0 ? _option$id : option,\n      value: option\n    }, _toDisplayString((_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option), 9\n    /* TEXT, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 10\n  /* CLASS, PROPS */\n  , _hoisted_2)), [[_vModelSelect, $setup.computedValue]]) : $setup.computedType === 'textarea' ? _withDirectives((_openBlock(), _createElementBlock(\"textarea\", {\n    key: 1,\n    id: $props.id,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $setup.computedValue = $event;\n    }),\n    class: _normalizeClass($setup.inputElClass),\n    name: $props.name,\n    placeholder: $props.placeholder,\n    required: $props.required\n  }, null, 10\n  /* CLASS, PROPS */\n  , _hoisted_4)), [[_vModelText, $setup.computedValue]]) : _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 2,\n    id: $props.id,\n    ref: \"inputEl\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return $setup.computedValue = $event;\n    }),\n    name: $props.name,\n    autocomplete: $props.autocomplete,\n    required: $props.required,\n    placeholder: $props.placeholder,\n    type: $setup.computedType,\n    class: _normalizeClass($setup.inputElClass)\n  }, null, 10\n  /* CLASS, PROPS */\n  , _hoisted_5)), [[_vModelDynamic, $setup.computedValue]]), $props.icon ? (_openBlock(), _createBlock($setup[\"ControlIcon\"], {\n    key: 3,\n    icon: $props.icon,\n    h: $setup.controlIconH\n  }, null, 8\n  /* PROPS */\n  , [\"icon\", \"h\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;AAgHOA,OAAK,EAAC;;;;;;;uBAAXC,oBA0CM,KA1CN,cA0CM,CAxCIC,wBAAY,0CADpBD,oBAcS,QAdT,EAcS;UAAA;AAZNE,MAAE,EAAEC,SAYE;;aAXEF,uBAAaG;MAWf;AAVNC,QAAI,EAAEF,WAUA;AATNJ,SAAK,kBAAEE,mBAAF;AASC,GAdT,sBAOED,oBAMSM,SANT,EAMS,IANT,EAMSC,YALUJ,cAKV,EALiB,UAAjBK,MAAiB,EAAX;AAAA;;yBADfR,oBAMS,QANT,EAMS;AAJNS,SAAG,gBAAED,MAAM,CAACN,EAAT,mDAAeM,MAIZ;AAHNE,WAAK,EAAEF;AAGD,KANT,oCAKKA,MAAM,CAACG,8DAASH,OALrB,EAK2B;AAAA;AAL3B,MAK2BI,UAL3B;GAMS,CANT;;AAAA,KAPF;;AAAA,mCAGWX,0BAaEA,wBAAY,4CADzBD,oBAQE,UARF,EAQE;UAAA;AANCE,MAAE,EAAEC,SAML;;aALSF,uBAAaG;MAKtB;AAJCL,SAAK,kBAAEE,mBAAF,CAIN;AAHCI,QAAI,EAAEF,WAGP;AAFCU,eAAW,EAAEV,kBAEd;AADCW,YAAQ,EAAEX;AACX,GARF;;AAAA,iCAGWF,yDAMXD,oBAWC,OAXD,EAWC;UAAA;AATEE,MAAE,EAAEC,SASN;AARCY,OAAG,EAAC,SAQL;;aAPUd,uBAAaG;MAOvB;AANEC,QAAI,EAAEF,WAMR;AALEa,gBAAY,EAAEb,mBAKhB;AAJEW,YAAQ,EAAEX,eAIZ;AAHEU,eAAW,EAAEV,kBAGf;AAFEc,QAAI,EAAEhB,mBAER;AADEF,SAAK,kBAAEE,mBAAF;AACP,GAXD;;AAAA,oCAIWA,uBAaP,EAJIE,6BADRe,aAIEjB,qBAJF,EAIE;UAAA;AAFCkB,QAAI,EAAEhB,WAEP;AADCiB,KAAC,EAAEnB;AACJ,GAJF;;AAAA,uDAKI,CA1CN","names":["class","_createElementBlock","$setup","id","$props","$event","name","_Fragment","_renderList","option","key","value","label","_hoisted_3","placeholder","required","ref","autocomplete","type","_createBlock","icon","h"],"sourceRoot":"","sources":["/Users/jasongreenberg/Desktop/dashboard/vue-admin-dashboard/src/components/Control.vue"],"sourcesContent":["<script setup>\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { useStore } from 'vuex'\nimport ControlIcon from '@/components/ControlIcon.vue'\n\nconst props = defineProps({\n  name: {\n    type: String,\n    default: null\n  },\n  id: {\n    type: String,\n    default: null\n  },\n  autocomplete: {\n    type: String,\n    default: null\n  },\n  placeholder: {\n    type: String,\n    default: null\n  },\n  icon: {\n    type: String,\n    default: null\n  },\n  options: {\n    type: Array,\n    default: null\n  },\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelValue: {\n    type: [String, Number, Boolean, Array, Object],\n    default: ''\n  },\n  required: Boolean,\n  borderless: Boolean,\n  transparent: Boolean,\n  ctrlKFocus: Boolean\n})\n\nconst emit = defineEmits(['update:modelValue', 'right-icon-click'])\n\nconst computedValue = computed({\n  get: () => props.modelValue,\n  set: value => {\n    emit('update:modelValue', value)\n  }\n})\n\nconst inputElClass = computed(() => {\n  const base = [\n    'px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full',\n    'dark:placeholder-gray-400',\n    computedType.value === 'textarea' ? 'h-24' : 'h-12',\n    props.borderless ? 'border-0' : 'border',\n    props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'\n  ]\n\n  if (props.icon) {\n    base.push('pl-10')\n  }\n\n  return base\n})\n\nconst computedType = computed(() => props.options ? 'select' : props.type)\n\nconst controlIconH = computed(() => props.type === 'textarea' ? 'h-full' : 'h-12')\n\nconst store = useStore()\n\nconst inputEl = ref(null)\n\nif (props.ctrlKFocus) {\n  const fieldFocusHook = e => {\n    if (e.ctrlKey && e.key === 'k') {\n      e.preventDefault()\n      inputEl.value.focus()\n    } else if (e.key === 'Escape') {\n      inputEl.value.blur()\n    }\n  }\n\n  onMounted(() => {\n    if (!store.state.isFieldFocusRegistered) {\n      window.addEventListener('keydown', fieldFocusHook)\n\n      store.commit('basic', {\n        key: 'isFieldFocusRegistered',\n        value: true\n      })\n    } else {\n      // console.error('Duplicate field focus event')\n    }\n  })\n\n  onBeforeUnmount(() => {\n    window.removeEventListener('keydown', fieldFocusHook)\n\n    store.commit('basic', {\n      key: 'isFieldFocusRegistered',\n      value: false\n    })\n  })\n}\n</script>\n\n<template>\n  <div class=\"relative\">\n    <select\n      v-if=\"computedType === 'select'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :class=\"inputElClass\"\n    >\n      <option\n        v-for=\"option in options\"\n        :key=\"option.id ?? option\"\n        :value=\"option\"\n      >\n        {{ option.label ?? option }}\n      </option>\n    </select>\n    <textarea\n      v-else-if=\"computedType === 'textarea'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :class=\"inputElClass\"\n      :name=\"name\"\n      :placeholder=\"placeholder\"\n      :required=\"required\"\n    />\n    <input\n      v-else\n      :id=\"id\"\n      ref=\"inputEl\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :autocomplete=\"autocomplete\"\n      :required=\"required\"\n      :placeholder=\"placeholder\"\n      :type=\"computedType\"\n      :class=\"inputElClass\"\n    >\n    <control-icon\n      v-if=\"icon\"\n      :icon=\"icon\"\n      :h=\"controlIconH\"\n    />\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}